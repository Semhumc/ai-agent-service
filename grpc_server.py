import grpc
from concurrent import futures
import json
import logging
import os
from typing import Dict, Any

# Proto dosyalarƒ±nƒ± import et
import route_guide_pb2 as grpc_server_pb2
import route_guide_pb2_grpc as grpc_server_pb2_grpc

from ai_agents import ai_agent

# Logging konfig√ºrasyonu
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AIService(grpc_server_pb2_grpc.AIServiceServicer):
    def __init__(self):
        """AI Service'i ba≈ülat"""
        try:
            self.agent = ai_agent()
            logger.info("‚úÖ AI Agent ba≈üarƒ±yla ba≈ülatƒ±ldƒ±")
        except Exception as e:
            logger.error(f"‚ùå AI Agent ba≈ülatƒ±lamadƒ±: {str(e)}")
            raise

    def GeneratePlan(self, request: grpc_server_pb2.PromptRequest, context) -> grpc_server_pb2.TripOptionsResponse:
        """
        3 farklƒ± tema i√ßin seyahat planlarƒ± olu≈üturur - UPDATED FOR 3 THEMES
        """
        try:
            logger.info(f"üì• gRPC Request alƒ±ndƒ±: {request}")
            
            # Request'ten veriyi √ßƒ±kar
            prompt_data = {
                'user_id': request.user_id,
                'name': request.name,
                'description': request.description,
                'start_position': request.start_position,
                'end_position': request.end_position,
                'start_date': request.start_date,
                'end_date': request.end_date
            }
            
            logger.info(f"üìä Prompt verisi hazƒ±rlandƒ±: {prompt_data}")
            
            # AI agent'tan plan al
            ai_response = self.agent.generate_trip_plan(prompt_data)
            logger.info(f"üß† AI'dan gelen yanƒ±t uzunluƒüu: {len(ai_response)} karakter")
            
            # Yanƒ±tƒ± debug i√ßin logla (ilk 500 karakter)
            logger.info(f"üîç AI Response (ilk 500 kar): {ai_response[:500]}...")
            
            # JSON parse et
            try:
                parsed_response = json.loads(ai_response)
                logger.info("‚úÖ JSON ba≈üarƒ±yla parse edildi")
                
                # trip_options var mƒ± kontrol et
                if 'trip_options' not in parsed_response:
                    logger.error("‚ùå 'trip_options' key'i JSON'da yok!")
                    logger.info(f"üîç Mevcut keys: {list(parsed_response.keys())}")
                    return self._create_fallback_options_response(request)
                
                trip_options_data = parsed_response['trip_options']
                if not isinstance(trip_options_data, list):
                    logger.error("‚ùå 'trip_options' bir list deƒüil!")
                    return self._create_fallback_options_response(request)
                
                if len(trip_options_data) == 0:
                    logger.warning("‚ö†Ô∏è 'trip_options' bo≈ü array!")
                    return self._create_fallback_options_response(request)
                    
                logger.info(f"‚úÖ trip_options bulundu, tema sayƒ±sƒ±: {len(trip_options_data)}")
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå JSON parse hatasƒ±: {str(e)}")
                logger.error(f"üîç Parse edilemeyen content: {ai_response}")
                return self._create_fallback_options_response(request)
            
            # Proto response olu≈ütur
            response = self._create_trip_options_response(parsed_response)
            logger.info(f"üéØ gRPC response hazƒ±rlandƒ±. Trip options: {len(response.trip_options)}")
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå GeneratePlan hatasƒ±: {str(e)}")
            logger.error(f"üîç Exception detaylarƒ±", exc_info=True)
            context.set_details(f"Internal server error: {str(e)}")
            context.set_code(grpc.StatusCode.INTERNAL)
            return self._create_fallback_options_response(request)

    def _create_trip_options_response(self, parsed_data: Dict[Any, Any]) -> grpc_server_pb2.TripOptionsResponse:
        """JSON verisini TripOptionsResponse'a √ßevir - YENƒ∞ METHOD"""
        try:
            trip_options = []
            
            # trip_options array'ini kontrol et
            options_data = parsed_data.get('trip_options', [])
            
            if not options_data:
                logger.warning("‚ö†Ô∏è trip_options array'i bo≈ü veya bulunamadƒ±")
                return self._create_empty_options_response()
            
            logger.info(f"üîÑ {len(options_data)} tema i≈üleniyor...")
            
            for i, option_data in enumerate(options_data):
                try:
                    logger.info(f"üîÑ Tema {i+1} i≈üleniyor: {option_data.get('theme', 'Unknown')}")
                    
                    # Daily plans olu≈ütur
                    daily_plans = []
                    daily_plan_data = option_data.get('daily_plan', [])
                    
                    logger.info(f"üìÖ Tema {i+1} i√ßin {len(daily_plan_data)} g√ºnl√ºk plan var")
                    
                    for j, daily in enumerate(daily_plan_data):
                        try:
                            location_data = daily.get('location', {})
                            
                            # Koordinatlarƒ± kontrol et ve √ßevir
                            latitude = 0.0
                            longitude = 0.0
                            
                            if 'latitude' in location_data:
                                try:
                                    latitude = float(location_data['latitude'])
                                except (ValueError, TypeError):
                                    logger.warning(f"‚ö†Ô∏è Tema {i+1} G√ºn {j+1}: Ge√ßersiz latitude")
                                    latitude = 39.0 + (i * 0.1)
                                    
                            if 'longitude' in location_data:
                                try:
                                    longitude = float(location_data['longitude'])
                                except (ValueError, TypeError):
                                    logger.warning(f"‚ö†Ô∏è Tema {i+1} G√ºn {j+1}: Ge√ßersiz longitude")
                                    longitude = 35.0 + (i * 0.1)
                            
                            daily_plan = grpc_server_pb2.DailyPlan(
                                day=daily.get('day', j + 1),
                                date=daily.get('date', ''),
                                location=grpc_server_pb2.Location(
                                    name=location_data.get('name', f'Kamp Alanƒ± {j+1}'),
                                    address=location_data.get('address', 'Adres bilgisi yok'),
                                    site_url=location_data.get('site_url', ''),
                                    latitude=latitude,
                                    longitude=longitude,
                                    notes=location_data.get('notes', '')
                                )
                            )
                            daily_plans.append(daily_plan)
                            logger.info(f"‚úÖ Tema {i+1} G√ºn {j+1} olu≈üturuldu: {location_data.get('name', 'Unknown')}")
                            
                        except Exception as e:
                            logger.error(f"‚ùå Tema {i+1} G√ºn {j+1} olu≈üturma hatasƒ±: {str(e)}")
                            # Hata durumunda varsayƒ±lan g√ºn olu≈ütur
                            daily_plan = grpc_server_pb2.DailyPlan(
                                day=j + 1,
                                date='2024-01-01',
                                location=grpc_server_pb2.Location(
                                    name=f'Varsayƒ±lan Kamp Alanƒ± {j+1}',
                                    address='Varsayƒ±lan adres',
                                    site_url='',
                                    latitude=39.0 + (i * 0.1),
                                    longitude=35.0 + (i * 0.1),
                                    notes='Hata nedeniyle varsayƒ±lan konum'
                                )
                            )
                            daily_plans.append(daily_plan)
                            continue
                        
                    logger.info(f"üìç Tema {i+1}: {len(daily_plans)} g√ºnl√ºk plan olu≈üturuldu")
                    
                    # Trip olu≈ütur
                    trip_data = option_data.get('trip', {})
                    
                    # total_days'i kontrol et ve √ßevir
                    total_days = 1
                    if 'total_days' in trip_data:
                        try:
                            total_days = int(trip_data['total_days'])
                        except (ValueError, TypeError):
                            logger.warning(f"‚ö†Ô∏è Tema {i+1}: Ge√ßersiz total_days")
                            total_days = len(daily_plans) if daily_plans else 1
                    
                    trip = grpc_server_pb2.Trip(
                        user_id=trip_data.get('user_id', ''),
                        name=trip_data.get('name', f'Tema {i+1}'),
                        description=trip_data.get('description', ''),
                        start_position=trip_data.get('start_position', ''),
                        end_position=trip_data.get('end_position', ''),
                        start_date=trip_data.get('start_date', ''),
                        end_date=trip_data.get('end_date', ''),
                        total_days=total_days,
                        route_summary=trip_data.get('route_summary', '')
                    )
                    
                    # Trip option olu≈ütur
                    trip_option = grpc_server_pb2.TripOption(
                        theme=option_data.get('theme', f'Tema {i+1}'),
                        description=option_data.get('description', ''),
                        trip=trip,
                        daily_plan=daily_plans
                    )
                    trip_options.append(trip_option)
                    
                    logger.info(f"‚úÖ Tema {i+1} ba≈üarƒ±yla olu≈üturuldu: {option_data.get('theme', f'Tema {i+1}')}")
                    
                except Exception as e:
                    logger.error(f"‚ùå Tema {i+1} olu≈üturma hatasƒ±: {str(e)}")
                    logger.error(f"üîç Tema {i+1} data: {option_data}")
                    continue
            
            if not trip_options:
                logger.warning("‚ö†Ô∏è Hi√ß tema olu≈üturulamadƒ±, fallback response d√∂n√ºyor")
                return self._create_empty_options_response()
            
            logger.info(f"üéØ Toplam {len(trip_options)} tema ba≈üarƒ±yla olu≈üturuldu")
            return grpc_server_pb2.TripOptionsResponse(
                trip_options=trip_options
            )
            
        except Exception as e:
            logger.error(f"‚ùå Trip options response olu≈üturma hatasƒ±: {str(e)}")
            logger.error(f"üîç Parsed data keys: {list(parsed_data.keys()) if isinstance(parsed_data, dict) else 'Not dict'}")
            return self._create_empty_options_response()

    def _create_fallback_options_response(self, request: grpc_server_pb2.PromptRequest) -> grpc_server_pb2.TripOptionsResponse:
        """Hata durumunda fallback TripOptionsResponse olu≈ütur - YENƒ∞ METHOD"""
        try:
            # 3 adet fallback tema olu≈ütur
            fallback_themes = [
                {
                    "theme": "Doƒüal G√ºzellikler Rotasƒ±",
                    "description": "G√∂ller, ≈üelaleler ve ormanlƒ±k alanlar gibi doƒüal harikalarƒ± ke≈üfeden bir rota.",
                },
                {
                    "theme": "Tarihi G√ºzellikler Rotasƒ±", 
                    "description": "Antik kentler, kaleler ve tarihi yapƒ±lar gibi k√ºlt√ºrel miraslarƒ± barƒ±ndƒ±ran bir rota.",
                },
                {
                    "theme": "Macera ve Aksiyon Rotasƒ±",
                    "description": "Daƒücƒ±lƒ±k, rafting, yama√ß para≈ü√ºt√º gibi aktivitelere uygun kamp alanlarƒ±nƒ± i√ßeren bir rota.",
                }
            ]
            
            trip_options = []
            
            for i, theme_info in enumerate(fallback_themes):
                # Fallback trip
                fallback_trip = grpc_server_pb2.Trip(
                    user_id=request.user_id,
                    name=f"{theme_info['theme']} - {request.name}",
                    description=theme_info['description'],
                    start_position=request.start_position,
                    end_position=request.end_position,
                    start_date=request.start_date,
                    end_date=request.end_date,
                    total_days=3,  # Varsayƒ±lan 3 g√ºn
                    route_summary=f"{request.start_position} - {request.end_position} {theme_info['theme'].lower()}"
                )
                
                # Fallback location
                fallback_location = grpc_server_pb2.Location(
                    name=f"{theme_info['theme'].split()[0]} Kamp Alanƒ±",
                    address=f"{request.start_position} yakƒ±nƒ± {theme_info['theme'].lower()} temalƒ± kamp alanƒ±",
                    site_url="",
                    latitude=39.0 + i * 0.1,
                    longitude=35.0 + i * 0.1,
                    notes=f"Varsayƒ±lan {theme_info['theme'].lower()} temalƒ± kamp alanƒ±"
                )
                
                # Fallback daily plan
                fallback_daily = grpc_server_pb2.DailyPlan(
                    day=1,
                    date=request.start_date,
                    location=fallback_location
                )
                
                # Trip option olu≈ütur
                trip_option = grpc_server_pb2.TripOption(
                    theme=theme_info["theme"],
                    description=theme_info["description"],
                    trip=fallback_trip,
                    daily_plan=[fallback_daily]
                )
                
                trip_options.append(trip_option)
            
            logger.info(f"üîß Fallback response olu≈üturuldu: {len(trip_options)} tema")
            return grpc_server_pb2.TripOptionsResponse(
                trip_options=trip_options
            )
            
        except Exception as e:
            logger.error(f"‚ùå Fallback response olu≈üturma hatasƒ±: {str(e)}")
            return self._create_empty_options_response()

    def _create_empty_options_response(self) -> grpc_server_pb2.TripOptionsResponse:
        """Bo≈ü TripOptionsResponse olu≈ütur"""
        logger.warning("‚ö†Ô∏è Bo≈ü trip options response olu≈üturuluyor")
        return grpc_server_pb2.TripOptionsResponse(
            trip_options=[]
        )

def serve(port: str = "50051"):
    """gRPC server'ƒ± ba≈ülat"""
    try:
        # Server olu≈ütur
        server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
        
        # AI Service'i ekle
        ai_service = AIService()
        grpc_server_pb2_grpc.add_AIServiceServicer_to_server(ai_service, server)
        
        # Port'u dinle
        listen_addr = f'[::]:{port}'
        server.add_insecure_port(listen_addr)
        
        # Server'ƒ± ba≈ülat
        server.start()
        logger.info(f"üöÄ gRPC server {port} portunda ba≈ülatƒ±ldƒ±")
        logger.info(f"üì° Dinlenen adres: {listen_addr}")
        
        # Graceful shutdown i√ßin bekle
        try:
            server.wait_for_termination()
        except KeyboardInterrupt:
            logger.info("üõë Server kapatƒ±lƒ±yor...")
            server.stop(0)
            
    except Exception as e:
        logger.error(f"‚ùå Server ba≈ülatma hatasƒ±: {str(e)}")
        raise

if __name__ == '__main__':
    # Environment'dan port al veya default kullan
    port = os.getenv('GRPC_PORT', '50051')
    serve(port)